import "./Dict_kernel" exposing ( kernelUpdate, kernelFromList, kernelToList, kernelInsert )
import "./Maybe" exposing ( Maybe, Just, Nothing )

exposing ( get, insert, update, values, fromList, toList )

get: a -> any -> Maybe b
get key dict =
    let
        value: b
        value =
            dict[key]
    in
        if value == globalThis.undefined then
            Nothing
        else
            Just { value: value }

insert: key -> value -> any -> any
insert key value dict =
    kernelInsert key value dict

update: a -> (Maybe v -> Maybe v) -> any -> any
update a fn dict =
    kernelUpdate a fn dict

values: any -> List any
values dict =
    globalThis.Object.values dict

type alias ListItem = {
    key: any,
    value: any
}

fromList: List ListItem -> any
fromList items =
    kernelFromList items

toList: any -> List ListItem
toList dict =
    kernelToList dict
