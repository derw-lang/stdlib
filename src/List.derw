import "./Maybe" exposing ( Maybe )

import "./List_kernel" exposing (kernelLength)

exposing (emptyList, map, filter, foldl, filterMap, append, reverse, length)

emptyList: List any
emptyList =
    [ ]

map: (a -> b) -> List a -> List b
map fn xs =
    xs.map fn

filter: (a -> boolean) -> List a -> List a
filter fn xs =
    xs.filter fn

foldl: (a -> b -> b) -> b -> List a -> b
foldl fn init xs =
    xs.reduce (\a b -> fn b a) init

filterMapHelp: (a -> Maybe b) -> a -> List b -> List b
filterMapHelp fn a xs =
    let
        maybe: Maybe b
        maybe = fn a
    in
        case maybe of
            Just { value } ->
                append xs [ value ]
            Nothing ->
                xs

filterMap: (a -> Maybe b) -> List a -> List b
filterMap fn xs =
    foldl (\y ys -> filterMapHelp fn y ys) [] xs

append: List a -> List a -> List a
append xs ys =
    emptyList.concat xs ys

reverse: List any -> List any
reverse xs =
    xs.reverse()

length: List any -> number
length xs =
    kernelLength xs