import "./List" as List
import "./Random" exposing ( shuffle, randomInt, choice )
import "./Test" exposing ( equals )

exposing ( testEmptyShuffle, testNonEmptyShuffle, testRandomInt, testEmptyChoice, testChoice )

testEmptyShuffle: boolean -> void
testEmptyShuffle a? =
    shuffle [ ]
        |> equals [ ]

testNonEmptyShuffle: boolean -> void
testNonEmptyShuffle a? =
    shuffle [
        1,
        2,
        3
    ]
        |> (\x -> equals 3 x.length)

isBetweenZeroAndTen: number -> boolean
isBetweenZeroAndTen x =
    x >= 0 && x <= 10

testRandomInt: boolean -> void
testRandomInt a? =
    List.map (\_ -> randomInt 0 10) [ 1..100 ]
        |> List.filter isBetweenZeroAndTen
        |> (\x -> equals 100 x.length)

testEmptyChoice: boolean -> void
testEmptyChoice a? =
    choice 0 [ ]
        |> equals [ ]

testChoice: boolean -> void
testChoice a? =
    choice 5 [ 1..100 ]
        |> (\x -> equals 5 x.length)
