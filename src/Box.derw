import "./kernel_box" exposing ( getTypeOf )
import "./Maybe" exposing ( Maybe, Just, Nothing )

exposing (RawJavascriptType, UndefinedValue, Boolean, Number, String, FunctionValue, ObjectValue, boxValue)

exposing (get)

type RawJavascriptType =
    UndefinedValue
    | Boolean { value: boolean }
    | Number { value: number }
    | String { value: string }
    | FunctionValue { value: any }
    | ObjectValue { value: any }

boxValue: any -> RawJavascriptType
boxValue value =
    case getTypeOf value of
        "undefined" ->
            UndefinedValue

        "boolean" ->
            Boolean { value: value }

        "number" ->
            Number { value: value }

        "string" ->
            String { value: value }

        "function" ->
            FunctionValue { value: value }

        "object" ->
            ObjectValue { value: value }

        default ->
            ObjectValue { value: value }

unsafeGet: a -> any -> Maybe b
unsafeGet key dict =
    let
        value: b
        value =
            dict["value"][key]
    in
        if value == undefined then
            Nothing
        else
            Just { value: value }

get: any -> RawJavascriptType -> Maybe any
get key val =
    case val of
        ObjectValue { value } ->
            unsafeGet key val

        default ->
            Nothing
