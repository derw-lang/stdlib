import "./List" exposing ( emptyList, map, indexedMap, filter, foldl, foldr, filterMap, append, reverse, length, take, drop, sort, sortBy )
import "./Maybe" exposing ( Maybe, Just, Nothing )
import "./Test" exposing ( equals )

exposing ( testEmptyList, testMap, testFilter, testFoldl, testFilterMap, testAppend, testReverse, testLength, testTake, testDrop )

exposing ( snapshotEmptyList, snapshotNumbersList, snapshotRangeList )

testEmptyList: boolean -> void
testEmptyList a? =
    equals 0 emptyList.length

testMap: boolean -> void
testMap a? =
    let
        increment: number -> number
        increment x =
            x + 1
    in
        map increment [
            1,
            2
        ]
            |> equals [
            2,
            3
        ]

testIndexedMap: boolean -> void
testIndexedMap a? =
    let
        increment: number -> number -> number
        increment x i =
            x + i
    in
        indexedMap increment [
            0,
            10,
            20
        ]
            |> equals [
            0,
            11,
            22
        ]

testFilter: boolean -> void
testFilter a? =
    let
        isLessThanThree: number -> boolean
        isLessThanThree x =
            x < 3
    in
        filter isLessThanThree [
            1,
            2,
            3,
            4
        ]
            |> equals [
            1,
            2
        ]

testFoldl: boolean -> void
testFoldl a? =
    let
        add: number -> number -> number
        add a b =
            a + b
    in
        foldl add 0 [
            1,
            2,
            3
        ]
            |> equals 6

testFoldlAppend: boolean -> void
testFoldlAppend a? =
    let
        add: number -> List number -> List number
        add a xs =
            a :: xs
    in
        foldl add [ ] [
            1,
            2,
            3
        ]
            |> equals [
            3,
            2,
            1
        ]

testFoldr: boolean -> void
testFoldr a? =
    let
        add: number -> number -> number
        add a b =
            a + b
    in
        foldr add 0 [
            1,
            2,
            3
        ]
            |> equals 6

testFoldrAppend: boolean -> void
testFoldrAppend a? =
    let
        add: number -> List number -> List number
        add a xs =
            a :: xs
    in
        foldr add [ ] [
            1,
            2,
            3
        ]
            |> equals [
            1,
            2,
            3
        ]

testFilterMap: boolean -> void
testFilterMap a? =
    let
        isLessThanThree: number -> any
        isLessThanThree x =
            if x < 3 then
                Just { value: x }
            else
                Nothing
    in
        filterMap isLessThanThree [
            1,
            2,
            3,
            4
        ]
            |> equals [
            1,
            2
        ]

testAppend: boolean -> void
testAppend a? =
    append [
        1,
        2
    ] [
        3,
        4
    ]
        |> equals [
        1,
        2,
        3,
        4
    ]

testReverse: boolean -> void
testReverse a? =
    reverse [
        1,
        2
    ]
        |> equals [
        2,
        1
    ]

testLength: boolean -> void
testLength a? =
    [
        1,
        2,
        3
    ]
        |> length
        |> equals 3

testTake: boolean -> void
testTake a? =
    [ 1..5 ]
        |> take 2
        |> equals [ 1..2 ]

testDrop: boolean -> void
testDrop a? =
    [ 1..5 ]
        |> drop 2
        |> equals [ 3..5 ]

testSort: boolean -> void
testSort a? =
    [
        1,
        3,
        5,
        2,
        4
    ]
        |> sort
        |> equals [
        1,
        2,
        3,
        4,
        5
    ]

type alias Entry = {
    x: number,
    y: string
}

negative: number
negative =
    1 - 2

sortingFunction: Entry -> Entry -> number
sortingFunction x y =
    if x.x == y.x then
        0
    else
        if x.x < y.x then
            negative
        else
            1

testSortBy: boolean -> void
testSortBy a? =
    [
        {
            x: 1,
            y: "one"
        },
        {
            x: 3,
            y: "three"
        },
        {
            x: 5,
            y: "five"
        },
        {
            x: 2,
            y: "two"
        },
        {
            x: 4,
            y: "four"
        }
    ]
        |> sortBy (\a b -> sortingFunction a b)
        |> equals [
        {
            x: 1,
            y: "one"
        },
        {
            x: 2,
            y: "two"
        },
        {
            x: 3,
            y: "three"
        },
        {
            x: 4,
            y: "four"
        },
        {
            x: 5,
            y: "five"
        }
    ]

snapshotEmptyList: void -> List any
snapshotEmptyList _0 =
    [ ]

snapshotNumbersList: void -> List number
snapshotNumbersList _0 =
    [
        1,
        2,
        3
    ]

snapshotRangeList: void -> List number
snapshotRangeList _0 =
    [ 1..10 ]
